use std::{
    net::{IpAddr, Ipv6Addr},
    time::Duration,
};
use tarpc::{client, context, tokio_serde::formats::Json};
use tokio::time::sleep;
use tracing::Instrument;

#[tokio::main]
pub async fn run() -> anyhow::Result<()> {
    let server_addr = (IpAddr::V6(Ipv6Addr::LOCALHOST), 42069);
    let transport = tarpc::serde_transport::tcp::connect(&server_addr, Json::default);

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let client = service::WorldClient::new(client::Config::default(), transport.await?).spawn();

    let hello = async move {
        // Send the request twice, just to be safe! ;)
        tokio::select! {
            hello1 = client.place(context::current(), 1, 2, 3) => { hello1 }
        }
    }
    .instrument(tracing::info_span!("Placing 1, 2, 3"))
    .await;

    tracing::info!("{:?}", hello);

    // Let the background span processor finish.
    sleep(Duration::from_micros(1)).await;
    opentelemetry::global::shutdown_tracer_provider();

    Ok(())
}
