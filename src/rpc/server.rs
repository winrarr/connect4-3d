use futures::{future, prelude::*};

use service::World;
use std::net::{IpAddr, SocketAddr};
use tarpc::{
    context,
    server::{self, incoming::Incoming, Channel},
    tokio_serde::formats::Json,
};

#[derive(Clone)]
struct Server(SocketAddr);

#[tarpc::server]
impl World for Server {
    async fn place(self, _: context::Context, x: u8, y: u8, z: u8) -> String {
        println!("server: {} {} {}", x, y, z);
        format!("{} {} {}", x, y, z)
    }
}

#[tokio::main]
pub async fn start(addr: (IpAddr, u16)) -> anyhow::Result<()> {
    let mut listener = tarpc::serde_transport::tcp::listen(&addr, Json::default).await?;

    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 2 per IP.
        .max_channels_per_key(2, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = Server(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve())
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}
